/**************************************************************************************************************************
* Method 1: HahsMap + Priority Queue
*           use HashMap to count the frequency of each unique character
*           and then make priority queue based on priority of most frequenct character is at top

*Time Complexity: O(N)[dut to frequency count of each chaacter] + N*log(N)[due to insertion and deletion of each unique character]
*Space Complexiy: O(N)
***************************************************************************************************************************/
class Solution {
    public String frequencySort(String s) {
        HashMap<Character, Integer> freqMap = new HashMap<>();
         for(int i=0; i<s.length(); i++){
             char c = s.charAt(i);
             freqMap.put(c, freqMap.getOrDefault(c, 0)+1);
         }

         
         PriorityQueue<Character> pq = new PriorityQueue<>((a, b) -> (Integer.compare(freqMap.get(b),freqMap.get(a))));
         for(Character key : freqMap.keySet()){
               pq.add(key);
         }
         StringBuilder sb = new StringBuilder();
         while(!pq.isEmpty()){
             Character c = pq.poll();
             int freq = freqMap.get(c);
             while(freq-- > 0)sb.append(c);
         }
       
        return sb.toString();
    }
}



/*************************************************************************************************************************
*Method 2: HashMap + Sorting based on frequency
*
*         use HashMap to count the frequecny of each unique character
*         create a list of the keys and then sort them using custom comparator based on frequency
*Time Complexity: O(N) + O(NlogN)[due to sorting in worst case all characters could be unique]
*Space Complexity: O(N)             
**************************************************************************************************************************/
class Solution {
    public String frequencySort(String s) {
        HashMap<Character, Integer> freqMap = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);
        }
        ArrayList<Character> keys = new ArrayList<>(freqMap.keySet());
        Collections.sort(keys, (a, b) -> Integer.compare(freqMap.get(b), freqMap.get(a)));

        StringBuilder sb = new StringBuilder();
        for (Character key : keys) {
            int freq = freqMap.get(key);
            while (freq-- > 0)
                sb.append(key);
        }

        return sb.toString();
    }
}



/***************************************************************************************************************************
*Method 3: HashMap + Bucket Sort
*          use hahsmap to count the frequency of each unique character
*          the maximum frequency of any number could be equal to size of string, 
*          we can use this observation and create array of 'n' buckets where each bucket will have ith frequent characters
Time Complexity: O(N) + O(N) + O(N) ~ O(N)
Space Complexity : O(N)                                 
****************************************************************************************************************************/
class Solution {
    public String frequencySort(String s) {
        HashMap<Character, Integer> freqMap = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);
        }
        
        int maxFrequency = Collections.max(freqMap.values());
        List<Character>[] buckets = new List[maxFrequency + 1];
        for (int i = 0; i <= maxFrequency; i++) {
            buckets[i] = new ArrayList<>();
        }

        for (Character key : freqMap.keySet()) {
            int freq = freqMap.get(key);
            buckets[freq].add(key);
        }

        StringBuilder sb = new StringBuilder();
        for (int i = buckets.length - 1; i >= 1; i--) {
            for (Character c : buckets[i]) {
                for (int j = 0; j < i; j++) {
                    sb.append(c);
                }
            }
        }

        return sb.toString();
    }
}
